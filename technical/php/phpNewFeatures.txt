8.0

1. Attributes

Instead of PHPDoc annotations, you can now use structured metadata with PHP's native syntax.

class PostsController
{
    #[Route("/api/posts/{id}", methods: ["GET"])]
    public function get($id) { /* ... */ }
}

2. Constructor property promotion

Less boilerplate code to define and initialize properties

class Point {
  public function __construct(
    public float $x = 0.0,
    public float $y = 0.0,
    public float $z = 0.0,
  ) {}
}

3. Union types

Instead of PHPDoc annotations for a combination of types, you can use native union type declarations that are validated at runtime.

class Number {
  public function __construct(
    private int|float $number
  ) {}
}


4. Match expression

The new match is similar to switch and has the following features:

. Match is an expression, meaning its result can be stored in a variable or returned.
. Match branches only support single-line expressions and do not need a break; statement.
. Match does strict comparisons

echo match (8.0) {
  '8.0' => "Oh no!",
  8.0 => "This is what I expected",
};

5. Nullsafe operator

Instead of null check conditions, you can now use a chain of calls with the new nullsafe operator

$country = $session?->user?->getAddress()?->country;


8.1


1. Enumerations

Use enum instead of a set of constants and get validation out of the box.

enum Status
{
    case Draft;
    case Published;
    case Archived;
}
function acceptStatus(Status $status) {...}


2.  Readonly Properties

Readonly properties cannot be changed after initialization, i.e. after a value is assigned to them.
They are a great way to model value objects and data-transfer objects.


class BlogData
{
    public readonly Status $status;
   
    public function __construct(Status $status) 
    {
        $this->status = $status;
    }
}




8.2


1. Readonly classes

readonly class BlogData
{
    public string $title;

    public Status $status;

    public function __construct(string $title, Status $status)
    {
        $this->title = $title;
        $this->status = $status;
    }
}


2. Allow null, false, and true as stand-alone types

class Falsy
{
    public function alwaysFalse(): false { /* ... */ *}

    public function alwaysTrue(): true { /* ... */ *}

    public function alwaysNull(): null { /* ... */ *}
}


3. Disjunctive Normal Form (DNF) Types

DNF types allow us to combine union and intersection types, following a strict rule: when combining union and intersection types, intersection types must be grouped with brackets

class Foo {
    public function bar((A&B)|null $entity) {
        return $entity;
    }
}


