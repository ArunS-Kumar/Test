Design Patterns

There are three types of design pattens

	1. 
	2. 
	3. 



1. Singleton Pattern:

	.Ensures that a class has only one instance and provides a global point of access to that instance. Useful for managing shared resources or configuration settings

	eg:

	class DatabaseConnection {
	    private static $instance; // The single instance of the class
	    private $connection;

	    private function __construct() {
	        // Private constructor to prevent external instantiation
	        $this->connection = mysqli_connect('localhost', 'username', 'password', 'database');
	    }

	    public static function getInstance() {
	        if (!self::$instance) {
	            self::$instance = new DatabaseConnection();
	        }
	        return self::$instance;
	    }

	    public function getConnection() {
	        return $this->connection;
	    }
	}



2. Factory Pattern

	.Useful for creating objects based on certain conditions or configurations

	eg:

	interface Vehicle {
    	public function drive();
	}

	class Car implements Vehicle {
	    public function drive() {
	        echo "Driving a car...\n";
	    }
	}

	class Motorcycle implements Vehicle {
	    public function drive() {
	        echo "Riding a motorcycle...\n";
	    }
	}

	class VehicleFactory {
	    public static function createVehicle($type) {
	        switch ($type) {
	            case 'car':
	                return new Car();
	            case 'motorcycle':
	                return new Motorcycle();
	            default:
	                throw new InvalidArgumentException("Invalid vehicle type: $type");
	        }
	    }
	}

	// Usage
	$car = VehicleFactory::createVehicle('car');
	$car->drive(); // Output: Driving a car...

	$motorcycle = VehicleFactory::createVehicle('motorcycle');
	$motorcycle->drive(); // Output: Riding a motorcycle...


3. Observer Pattern

	.The Observer Pattern is a behavioral design pattern that defines a one-to-many dependency between objects. When one object (subject) changes its state, all its dependents (observers) are notified and updated automatically

	eg:

	interface Observer {
	    public function update($message);
	}

	class ConcreteObserver implements Observer {
	    private $name;

	    public function __construct($name) {
	        $this->name = $name;
	    }

	    public function update($message) {
	        echo "Observer $this->name received message: $message\n";
	    }
	}

	interface Subject {
	    public function attach(Observer $observer);
	    public function detach(Observer $observer);
	    public function notify($message);
	}

	class ConcreteSubject implements Subject {
	    private $observers = [];
	    private $state;

	    public function attach(Observer $observer) {
	        $this->observers[] = $observer;
	    }

	    public function detach(Observer $observer) {
	        $index = array_search($observer, $this->observers);
	        if ($index !== false) {
	            unset($this->observers[$index]);
	        }
	    }

	    public function notify($message) {
	        foreach ($this->observers as $observer) {
	            $observer->update($message);
	        }
	    }

	    public function setState($state) {
	        $this->state = $state;
	        $this->notify("State changed to $this->state");
	    }
	}

	// Usage
	$observer1 = new ConcreteObserver("Observer 1");
	$observer2 = new ConcreteObserver("Observer 2");

	$subject = new ConcreteSubject();
	$subject->attach($observer1);
	$subject->attach($observer2);

	$subject->setState("on");
	$subject->detach($observer2);
	$subject->setState("off");

	output:
	Observer Observer 1 received message: State changed to on
	Observer Observer 2 received message: State changed to on
	Observer Observer 1 received message: State changed to off


4. Strategy Pattern

	- It allows a client to choose an algorithm from a family of algorithms at runtime, without altering the client's code

	eg:
	interface PaymentStrategy {
	    public function pay($amount);
	}

	class CreditCardPayment implements PaymentStrategy {
	    private $cardNumber;
	    private $expirationDate;

	    public function __construct($cardNumber, $expirationDate) {
	        $this->cardNumber = $cardNumber;
	        $this->expirationDate = $expirationDate;
	    }

	    public function pay($amount) {
	        echo "Paid $$amount using credit card $this->cardNumber\n";
	    }
	}

	class PayPalPayment implements PaymentStrategy {
	    private $email;

	    public function __construct($email) {
	        $this->email = $email;
	    }

	    public function pay($amount) {
	        echo "Paid $$amount using PayPal account $this->email\n";
	    }
	}

	class PaymentContext {
	    private $paymentStrategy;

	    public function __construct(PaymentStrategy $paymentStrategy) {
	        $this->paymentStrategy = $paymentStrategy;
	    }

	    public function processPayment($amount) {
	        $this->paymentStrategy->pay($amount);
	    }
	}

	// Usage
	$creditCardPayment = new CreditCardPayment("1234 5678 9012 3456", "12/24");
	$paypalPayment = new PayPalPayment("example@example.com");

	$creditCardContext = new PaymentContext($creditCardPayment);
	$creditCardContext->processPayment(100); // Paid $100 using credit card 1234 5678 9012 3456

	$paypalContext = new PaymentContext($paypalPayment);
	$paypalContext->processPayment(50); // Paid $50 using PayPal account example@example.com




