1. Single Responsibility principle
	
	- A class should only have a single responsibility


2. Open/Closed principle

	- Class should be open for extension, and close for modification.



3. Liskov substitution principle

. Subtypes must be substitutable for their base types without breaking the behavior
. We should not inhertance for only code reuse.



4. Interface Segregation Principle

. A client should never be forced to implement an interface that it doesn’t use, or clients shouldn’t be forced to depend on methods they do not use.



5. Dependency Inversion Principle

. Depend upon abstraction or interface not upon concrete class.
. It promotes flexibility, reusability, and easier maintenance
